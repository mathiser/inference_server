version: '3'

services:
  reverse-proxy:
    restart: always
    image: traefik:v2.6
    hostname: reverse_proxy
    command:
      - --providers.docker=true
      - --entrypoints.websecure.address=:443
      - --providers.file.directory=/configuration/
      - --providers.file.watch=true
    ports:
      - 443:443
    networks:
      - frontend
    labels:
      traefik.enable: true
    volumes:
      - ./traefik/certs:/tools/certs
      - ./traefik/configuration:/configuration/
      - //var/run/docker.sock://var/run/docker.sock

  public-api:
    restart: always
    image: mathiser/inference_server:public_api_dev
    hostname: public_api
    networks:
      - frontend
    command: python main.py
    environment:
      - LOG_LEVEL=20
      - ALLOW_PUBLIC_POST_MODEL="true"
      - PYTHONUNBUFFERED=1
    ports:
      - 8000:8000
    labels:
      - "traefik.http.routers.inference_server_public_api.rule=Host(`omen.onerm.dk`)"
      - "traefik.http.services.inference_server_public_api.loadbalancer.server.port=8000"
      - "traefik.http.routers.inference_server_public_api.tls=true"

  api:
    hostname: private_api
    restart: always
    image: mathiser/inference_server:private_api
    depends_on:
      - rabbit
    ports:
      - 7000
    networks:
      - frontend
      - backend
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=20
   # volumes:
    # - ./mounts/data:/data

  rabbit:
    restart: always
    image: rabbitmq:3.9.17
    ports:
      - 5672
    hostname: rabbit
    networks:
      - backend
    volumes:
      - ./rabbit/timeout.conf:/etc/rabbitmq/conf.d/timeout.conf

  job-consumer:
    hostname: consumer_0
    image: mathiser/inference_server:job_consumer_dev
    restart: always
    ports:
      - "80" #Dummy port to make traefik quiet
    networks:
      - backend
    depends_on:
      - rabbit
      - api
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=20
    volumes:
      # needed to dispatch docker containers from inside a docker container
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  frontend:
  backend:
#    driver: overlay
    #driver_opts:
    #  encrypted: "true"
