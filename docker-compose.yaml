version: '3'

services:
  reverse-proxy:
    restart: always
    image: traefik:v2.6
    hostname: reverse-proxy
    command:
      - --providers.docker=true
      - --entrypoints.websecure.address=:443
      - --providers.file.directory=/configuration/
      - --providers.file.watch=true
    ports:
      - 443:443
    networks:
      - internal_network
    labels:
      traefik.enable: true
    volumes:
      - ./traefik/certs:/tools/certs
      - ./traefik/configuration:/configuration/
      - ${DOCKER_SOCKET}:${DOCKER_SOCKET}

  public-api:
    restart: always
    build:
      context: ./public_api
      dockerfile: Dockerfile
    hostname: ${PUBLIC_API_HOSTNAME}
    networks:
      - internal_network
    command: python main.py
    env_file:
      - .env
    ports:
      - ${PUBLIC_API_PORT}
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_${PUBLIC_API_HOSTNAME}.rule=Host(`${PROXY_URL}`)"
      - "traefik.http.services.${PROJECT_NAME}_${PUBLIC_API_HOSTNAME}.loadbalancer.server.port=${PUBLIC_API_PORT}"
      - "traefik.http.routers.${PROJECT_NAME}_${PUBLIC_API_HOSTNAME}.tls=${HTTPS_ON}"

  api:
    hostname: ${API_HOSTNAME}
    command: python main.py
    restart: always
    depends_on:
      - rabbit
    ports:
      - ${API_PORT}
    networks:
      - internal_network
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    build:
      context: ./private_api
      dockerfile: Dockerfile
    volumes:
     - ./mounts/data:/data

  rabbit:
    restart: always
    image: ${RABBIT_DOCKER_TAG}
    ports:
      - ${RABBIT_PORT}
    hostname: ${RABBIT_HOSTNAME}
    networks:
      - internal_network
    volumes:
      - ./rabbit/timeout.conf:/etc/rabbitmq/conf.d/timeout.conf

  job-consumer:
    hostname: consumer
    restart: always
    ports:
      - "80" #Dummy port to make traefik quiet
    command: /usr/bin/python3 main.py
    networks:
      - internal_network
    depends_on:
      - rabbit
      - api
    env_file:
      - .env
    build:
      context: ./job_consumer/
      dockerfile: Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      # needed to dispatch docker containers from inside a docker container
      - ${DOCKER_SOCKET}:${DOCKER_SOCKET}


networks:
  internal_network: