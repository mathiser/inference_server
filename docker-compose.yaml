version: '3'

services:
  reverse-proxy:
    restart: always
    image: traefik:v2.6
    hostname: reverse_proxy
    command:
      - --providers.docker=true
      - --entrypoints.websecure.address=:443
      - --providers.file.directory=/configuration/
      - --providers.file.watch=true
    ports:
      - 443:443
    networks:
      - network
    labels:
      traefik.enable: true
    volumes:
      - ./traefik/certs:/tools/certs
      - ./traefik/configuration:/configuration/
      - //var/run/docker.sock://var/run/docker.sock

  rabbit:
    restart: always
    image: rabbitmq:3.9.17
    networks:
      - network
    ports:
      - 5672
    hostname: rabbit
    volumes:
      - ./rabbit/timeout.conf:/etc/rabbitmq/conf.d/timeout.conf

  controller:
    hostname: controller
    restart: always
    depends_on:
      - rabbit
    networks:
      - network
    image: mathiser/inference_server:controller_dev
    ports:
      - 8123
    environment:
      - INFERENCE_SERVER_TOKEN=5vDY76c8IcjKhEUs7Qit2vWEEo8E7Ej18mtbOHdffdMBKBYw36VKGPn0JCJIsrGcuQPl0KQEZ2n7DfnwchhjDA
      - RABBIT_HOSTNAME=rabbit
      - LOG_LEVEL=20
      - PYTHONUNBUFFERED=1
    labels:
      - "traefik.http.routers.inference_server_public_api.rule=Host(`omen.onerm.dk`)"
      - "traefik.http.services.inference_server_public_api.loadbalancer.server.port=8123"
      - "traefik.http.routers.inference_server_public_api.tls=true"
    volumes:
      - ./mounts:/home/app/data
  
  consumer:
    hostname: consumer
    restart: always
    image: mathiser/inference_server:consumer_dev
    networks:
      - network
    depends_on:
      - rabbit
      - controller
    environment:
      - INFERENCE_SERVER_TOKEN=5vDY76c8IcjKhEUs7Qit2vWEEo8E7Ej18mtbOHdffdMBKBYw36VKGPn0JCJIsrGcuQPl0KQEZ2n7DfnwchhjDA
      - RABBIT_HOSTNAME=rabbit
      - CONTROLLER_HOSTNAME=controller
      - LOG_LEVEL=20
      - PYTHONUNBUFFERED=1
    volumes:
      # needed to dispatch docker containers from inside a docker container
      - /var/run/docker.sock:/var/run/docker.sock
networks:
  network:
#    driver: overlay
    #driver_opts:
    #  encrypted: "true"
