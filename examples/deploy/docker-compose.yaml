version: '3'

services:
  reverse-proxy:
    restart: always
    image: traefik:v2.6
    hostname: reverse_proxy
    command:
      - --providers.docker=true
      - --entrypoints.websecure.address=:443
      - --providers.file.directory=/configuration/
      - --providers.file.watch=true
    ports:
      - 443:443
    networks:
      - frontend
    labels:
      traefik.enable: true
    volumes:
      - ./traefik/certs:/tools/certs
      - ./traefik/configuration:/configuration/
      - //var/run/docker.sock://var/run/docker.sock

  public-api:
    restart: always
    build:
      context: ./public_api
      dockerfile: Dockerfile
    hostname: public_api
    networks:
      - frontend
    command: python main.py
    environment:
      - TZ=Europe/Copenhagen
      - API_HOSTNAME=private_api
      - API_PORT=7000
      - API_URL=http://private_api:7000
      - LOG_LEVEL=20
      - API_TASKS=/api/tasks/
      - API_OUTPUT_ZIPS=/api/tasks/outputs/
      - API_MODELS=/api/models/
      - PUBLIC_API_HOSTNAME=public_api
      - PUBLIC_API_PORT=8000
      - ALLOW_PUBLIC_POST_MODEL="true"
    ports:
      - 8000:8000
    labels:
      - "traefik.http.routers.inference_server_public_api.rule=Host(`localhost`)"
      - "traefik.http.services.inference_server_public_api.loadbalancer.server.port=8000"
      - "traefik.http.routers.inference_server_public_api.tls=false"

  api:
    hostname: private_api
    command: python main.py
    restart: always
    depends_on:
      - rabbit
    ports:
      - 7000
    networks:
      - frontend
      - backend
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=Europe/Copenhagen
      - RABBIT_DOCKER_TAG=rabbitmq:3.9.17
      - API_HOSTNAME=private_api
      - API_PORT=7000
      - API_URL=http://private_api:7000
      - LOG_LEVEL=20
      - DATA_DIR=/opt/app/data/
      - RABBIT_HOSTNAME=rabbit
      - RABBIT_PORT=5672
      - UNFINISHED_JOB_QUEUE=unfinished_job_queue
      - FINISHED_JOB_QUEUE=finished_job_queue
      - API_TASKS=/api/tasks/
      - API_OUTPUT_ZIPS=/api/tasks/outputs/
      - API_INPUT_ZIPS=/api/tasks/inputs/
      - API_MODELS=/api/models/
      - API_MODELS_BY_HUMAN_READABLE_ID=/api/models/human_readable_id/
      - API_MODEL_ZIPS=/api/models/zips/
    build:
      context: ./private_api
      dockerfile: Dockerfile
    volumes:
     - ./mounts/data:/data

  rabbit:
    restart: always
    image: rabbitmq:3.9.17
    ports:
      - 5672
    hostname: rabbit
    networks:
      - backend
    volumes:
      - ./rabbit/timeout.conf:/etc/rabbitmq/conf.d/timeout.conf

  job-consumer:
    hostname: consumer_0
    restart: always
    ports:
      - "80" #Dummy port to make traefik quiet
    command: /usr/bin/python3 main.py
    networks:
      - backend
    depends_on:
      - rabbit
      - api
    build:
      context: ./job_consumer/
      dockerfile: Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=Europe/Copenhagen
      - NETWORK_NAME=inference_server_backend
      - API_HOSTNAME=private_api
      - API_PORT=7000
      - API_URL=http://private_api:7000
      - LOG_LEVEL=20
      - RABBIT_HOSTNAME=rabbit
      - RABBIT_PORT=5672
      - UNFINISHED_JOB_QUEUE=unfinished_job_queue
      - FINISHED_JOB_QUEUE=finished_job_queue
      - API_TASKS=/api/tasks/
      - API_OUTPUT_ZIPS=/api/tasks/outputs/
      - API_INPUT_ZIPS=/api/tasks/inputs/
      - API_MODELS=/api/models/
      - API_MODELS_BY_HUMAN_READABLE_ID=/api/models/human_readable_id/
      - API_MODEL_ZIPS=/api/models/zips/
      - GPU_UUID=""
      - PREFETCH_JOBS=1
      - VOLUME_SENDER_DOCKER_TAG=mathiser/inference_server:volume_sender
      - BUSYBOX_DOCKER_TAG=busybox:1.35
    volumes:
      # needed to dispatch docker containers from inside a docker container
      - //var/run/docker.sock://var/run/docker.sock

networks:
  frontend:
  backend:
#    driver: overlay
    #driver_opts:
    #  encrypted: "true"
